[{"/Users/marcegi/Desktop/crehana/discover-world/src/index.tsx":"1","/Users/marcegi/Desktop/crehana/discover-world/src/reportWebVitals.ts":"2","/Users/marcegi/Desktop/crehana/discover-world/src/routes/App.tsx":"3","/Users/marcegi/Desktop/crehana/discover-world/src/containers/HomePage.tsx":"4","/Users/marcegi/Desktop/crehana/discover-world/src/containers/Country.tsx":"5","/Users/marcegi/Desktop/crehana/discover-world/src/components/Header.tsx":"6","/Users/marcegi/Desktop/crehana/discover-world/src/components/Footer.tsx":"7","/Users/marcegi/Desktop/crehana/discover-world/src/components/SearchBar.tsx":"8","/Users/marcegi/Desktop/crehana/discover-world/src/components/ListCountries.tsx":"9","/Users/marcegi/Desktop/crehana/discover-world/src/components/Filter.tsx":"10","/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/HomePage.tsx":"11","/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/GeneralStyled.tsx":"12","/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/Country.tsx":"13","/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/Filter.tsx":"14","/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/Footer.tsx":"15","/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/Header.tsx":"16","/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/SearchBar.tsx":"17"},{"size":567,"mtime":1606973531515,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1606951416000,"results":"20","hashOfConfig":"19"},{"size":723,"mtime":1606951416000,"results":"21","hashOfConfig":"19"},{"size":3170,"mtime":1606973466429,"results":"22","hashOfConfig":"19"},{"size":1200,"mtime":1606973834713,"results":"23","hashOfConfig":"19"},{"size":220,"mtime":1606974799711,"results":"24","hashOfConfig":"19"},{"size":633,"mtime":1606974657075,"results":"25","hashOfConfig":"19"},{"size":260,"mtime":1606975050772,"results":"26","hashOfConfig":"19"},{"size":3029,"mtime":1606968445314,"results":"27","hashOfConfig":"19"},{"size":721,"mtime":1606974154126,"results":"28","hashOfConfig":"19"},{"size":909,"mtime":1606973019752,"results":"29","hashOfConfig":"19"},{"size":392,"mtime":1606973521237,"results":"30","hashOfConfig":"19"},{"size":1581,"mtime":1606973680900,"results":"31","hashOfConfig":"19"},{"size":1146,"mtime":1606975653490,"results":"32","hashOfConfig":"19"},{"size":219,"mtime":1606974615384,"results":"33","hashOfConfig":"19"},{"size":459,"mtime":1606974767516,"results":"34","hashOfConfig":"19"},{"size":496,"mtime":1606975010261,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1jde4be",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Users/marcegi/Desktop/crehana/discover-world/src/index.tsx",[],["72","73"],"/Users/marcegi/Desktop/crehana/discover-world/src/reportWebVitals.ts",[],"/Users/marcegi/Desktop/crehana/discover-world/src/routes/App.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/containers/HomePage.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/containers/Country.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/components/Header.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/components/Footer.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/components/SearchBar.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/components/ListCountries.tsx",["74"],"import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport _ from 'lodash';\n\ntype country = {\n    name: string;\n    officialLanguages: [];\n    currencies: [];\n    subregion: {\n        name: string;\n        region: {\n            name: string;\n        };\n    };\n    [x: string]: any;\n};\n\ninterface IProps {\n    countries: Array<country>;\n    filters: {\n        language?: string;\n        region?: string;\n        currency?: string;\n    };\n}\n\nconst hasLanguage = (country: country, filterlanguage: string): boolean => {\n    const { officialLanguages = [] } = country;\n    let result = officialLanguages.find((oLanguage: { name: string }) => {\n        return filterlanguage === oLanguage.name;\n    });\n\n    return result ? true : false;\n};\n\nconst hasCurrency = (country: country, filterCurrency: string): boolean => {\n    const { currencies = [] } = country;\n    let result = currencies.find((currency: { name: string }) => {\n        return filterCurrency === currency.name;\n    });\n\n    return result ? true : false;\n};\n\nconst isRegion = (country: country, filterRegion: string): boolean => {\n        let result;\n    try {\n        result = country.subregion.region.name === filterRegion;\n\n    } catch (error) {\n        result = false\n    }   \n\n    return result;\n};\n\nfunction ListCountries(props: IProps) {\n    const {\n        filters,\n        filters: { language = '', currency = '', region = '' },\n        countries,\n    } = props;\n\n    const [ filteredCountries, setFilteredCountries ] = useState<Array<country>>([])\n\n    const filterCountries = (countries: Array<country>) => {\n\n\n        if(!language && !region && !currency){\n            \n            return countries;\n        } \n\n        let byLanguage: Array<country> = [];\n        let byRegion: Array<country> = [];\n        let byCurrency: Array<country> = [];\n        let toIntersect = [];\n\n        countries.forEach((country: country) => {\n            \n            if(language && hasLanguage(country,language)){\n                \n                byLanguage.push(country)\n                \n            }\n            if(currency && hasCurrency(country,currency)){\n                byCurrency.push(country)\n                \n            }\n            if(region && isRegion(country,region)){\n                byRegion.push(country)\n    \n            }\n\n        });\n\n        if(language) toIntersect.push(byLanguage)\n        if(region) toIntersect.push(byRegion)\n        if(currency) toIntersect.push(byCurrency)\n\n        let result  = _.intersection(...toIntersect);\n\n        return result;\n\n    };\n\n    useEffect(() => {\n        setFilteredCountries(filterCountries(countries))\n    }, [filters, countries]);\n\n    const Countries = () =>\n        filteredCountries.map((country: country, index: number) => {\n            return (\n                <Link to=\"/country\" key={index}>\n                    <span>{country.name}</span>\n                </Link>\n            );\n        });\n\n    return <>{Countries()}</>;\n}\n\nexport default ListCountries;\n","/Users/marcegi/Desktop/crehana/discover-world/src/components/Filter.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/HomePage.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/GeneralStyled.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/Country.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/Filter.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/Footer.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/Header.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/SearchBar.tsx",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":109,"column":8,"nodeType":"81","endLine":109,"endColumn":28,"suggestions":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filterCountries'. Either include it or remove the dependency array.","ArrayExpression",["85"],"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Update the dependencies array to be: [filters, countries, filterCountries]",{"range":"88","text":"89"},[2674,2694],"[filters, countries, filterCountries]"]