[{"/Users/marcegi/Desktop/crehana/discover-world/src/index.tsx":"1","/Users/marcegi/Desktop/crehana/discover-world/src/reportWebVitals.ts":"2","/Users/marcegi/Desktop/crehana/discover-world/src/routes/App.tsx":"3","/Users/marcegi/Desktop/crehana/discover-world/src/containers/HomePage.tsx":"4","/Users/marcegi/Desktop/crehana/discover-world/src/containers/Country.tsx":"5","/Users/marcegi/Desktop/crehana/discover-world/src/components/Header.tsx":"6","/Users/marcegi/Desktop/crehana/discover-world/src/components/Footer.tsx":"7","/Users/marcegi/Desktop/crehana/discover-world/src/components/SearchBar.tsx":"8","/Users/marcegi/Desktop/crehana/discover-world/src/components/ListCountries.tsx":"9","/Users/marcegi/Desktop/crehana/discover-world/src/components/Filter.tsx":"10","/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/HomePage.tsx":"11","/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/GeneralStyled.tsx":"12","/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/Country.tsx":"13","/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/Filter.tsx":"14","/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/Footer.tsx":"15","/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/Header.tsx":"16","/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/SearchBar.tsx":"17"},{"size":567,"mtime":1606973531515,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1606951416000,"results":"20","hashOfConfig":"19"},{"size":1666,"mtime":1606982594912,"results":"21","hashOfConfig":"19"},{"size":3637,"mtime":1606982432136,"results":"22","hashOfConfig":"19"},{"size":3347,"mtime":1606982309636,"results":"23","hashOfConfig":"19"},{"size":220,"mtime":1606974799711,"results":"24","hashOfConfig":"19"},{"size":633,"mtime":1606974657075,"results":"25","hashOfConfig":"19"},{"size":463,"mtime":1606981298104,"results":"26","hashOfConfig":"19"},{"size":3616,"mtime":1606982249413,"results":"27","hashOfConfig":"19"},{"size":721,"mtime":1606974154126,"results":"28","hashOfConfig":"19"},{"size":909,"mtime":1606973019752,"results":"29","hashOfConfig":"19"},{"size":392,"mtime":1606973521237,"results":"30","hashOfConfig":"19"},{"size":1581,"mtime":1606973680900,"results":"31","hashOfConfig":"19"},{"size":1146,"mtime":1606975653490,"results":"32","hashOfConfig":"19"},{"size":219,"mtime":1606974615384,"results":"33","hashOfConfig":"19"},{"size":459,"mtime":1606974767516,"results":"34","hashOfConfig":"19"},{"size":496,"mtime":1606975010261,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1jde4be",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Users/marcegi/Desktop/crehana/discover-world/src/index.tsx",[],["74","75"],"/Users/marcegi/Desktop/crehana/discover-world/src/reportWebVitals.ts",[],"/Users/marcegi/Desktop/crehana/discover-world/src/routes/App.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/containers/HomePage.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/containers/Country.tsx",["76"],"import React, { useEffect, useState } from 'react';\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\nimport { Link } from 'react-router-dom'\nimport { useLazyQuery, gql } from '@apollo/client';\nimport { country } from './../interfaces/country';\nimport { ContainerHeader, ContainerInfoCountry, ButtonBack, Information, Flag} from '../assets/styles/Country'\n\n\nconst COUNTRY_DATA = gql`\n    query GetCountry($alpha2Code: String!) {\n        Country(alpha2Code: $alpha2Code) {\n            name\n            alpha2Code\n            area\n            population\n            capital\n            subregion {\n                name\n                region {\n                    name\n                }\n            }\n            officialLanguages {\n                name\n            }\n            currencies {\n                name\n            }\n            flag {\n                emoji\n            }\n        }\n    }\n`;\n\ninterface IProps {\n    [x: string]: any;\n    selectedCountry: country;\n}\nfunction Country(props: IProps): JSX.Element {\n    const {\n        match: { params },\n    } = props;\n\n    const [country, setCountry] = useState(props.selectedCountry);\n\n    const {\n        area,\n        name,\n        subregion,\n        population,\n        capital,\n        officialLanguages,\n        currencies,\n        flag,\n    } = country;\n\n    const [getCountries, { data }] = useLazyQuery(\n        COUNTRY_DATA,\n        {\n            variables: { alpha2Code: params.country.toUpperCase() },\n        }\n    );\n\n    useEffect(() => {\n        if (!props.selectedCountry.name) getCountries();\n    }, []);\n\n    useEffect(() => {\n        if (data) {\n            setCountry(data.Country[0]);\n        }\n    }, [data]);\n\n    return (\n        <>\n            <ContainerHeader>\n                <Link to=\"/\" title=\" button back\">\n                    <ButtonBack>‚ùÆ</ButtonBack>\n                </Link>\n                <Header />\n                <ButtonBack />\n            </ContainerHeader>\n            <ContainerInfoCountry>\n                {country.name && (\n                    <>\n                        <Information>\n                            <span>{name}</span>\n                            <ul>\n                                <li>Region: {subregion.region.name}</li>\n                                <li>Area: {area}</li>\n                                <li>Capital: {capital}</li>\n                                <li>Population: {population}</li>\n                                <li>\n                                    Currencies:{' '}\n                                    {currencies\n                                        .map((i: { name: string }) => i.name)\n                                        .join()}\n                                </li>\n                                <li>\n                                    Oficial languages:{' '}\n                                    {officialLanguages\n                                        .map((i: { name: string }) => i.name)\n                                        .join()}\n                                </li>\n                            </ul>\n                        </Information>\n                        <Flag>{flag.emoji}</Flag>\n                    </>\n                )}\n            </ContainerInfoCountry>\n            <Footer />\n        </>\n    );\n}\n\nexport default Country;","/Users/marcegi/Desktop/crehana/discover-world/src/components/Header.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/components/Footer.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/components/SearchBar.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/components/ListCountries.tsx",["77"],"import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport _ from 'lodash';\nimport { country } from './../interfaces/country';\n\ninterface IProps {\n    countries: Array<country>;\n    setSelectedCountry: Function;\n    filters: {\n        language?: string;\n        region?: string;\n        currency?: string;\n    };\n    searchQuery: string;\n}\n\nconst hasLanguage = (country: country, filterlanguage: string): boolean => {\n    const { officialLanguages = [] } = country;\n    let result = officialLanguages.find((oLanguage: { name: string }) => {\n        return filterlanguage === oLanguage.name;\n    });\n\n    return result ? true : false;\n};\n\nconst hasCurrency = (country: country, filterCurrency: string): boolean => {\n    const { currencies = [] } = country;\n    let result = currencies.find((currency: { name: string }) => {\n        return filterCurrency === currency.name;\n    });\n\n    return result ? true : false;\n};\n\nconst isRegion = (country: country, filterRegion: string): boolean => {\n    let result;\n    try {\n        result = country.subregion.region.name === filterRegion;\n    } catch (error) {\n        result = false;\n    }\n\n    return result;\n};\n\nfunction ListCountries(props: IProps) {\n    const {\n        filters,\n        setSelectedCountry,\n        filters: { language = '', currency = '', region = '' },\n        countries,\n        searchQuery,\n    } = props;\n    const [filteredCountries, setFilteredCountries] = useState<Array<country>>(\n        []\n    );\n\n    useEffect(() => {\n        setFilteredCountries(filterCountries(countries));\n    }, [filters, countries, searchQuery]);\n\n    const filterCountries = (countries: Array<country>) => {\n        if (!language && !region && !currency && !searchQuery) {\n            return countries;\n        }\n\n        let byLanguage: Array<country> = [];\n        let byRegion: Array<country> = [];\n        let byCurrency: Array<country> = [];\n        let byQuery: Array<country> = [];\n        let toIntersect = [];\n\n        countries.forEach((country: country) => {\n            if (language && hasLanguage(country, language)) {\n                byLanguage.push(country);\n            }\n            if (currency && hasCurrency(country, currency)) {\n                byCurrency.push(country);\n            }\n            if (region && isRegion(country, region)) {\n                byRegion.push(country);\n            }\n            if (\n                searchQuery &&\n                (country.name\n                    .toLocaleLowerCase()\n                    .startsWith(searchQuery.toLocaleLowerCase()) ||\n                    country.alpha2Code\n                        .toLocaleLowerCase()\n                        .startsWith(searchQuery.toLocaleLowerCase()))\n            ) {\n                byQuery.push(country);\n            }\n        });\n\n        if (language) toIntersect.push(byLanguage);\n        if (region) toIntersect.push(byRegion);\n        if (currency) toIntersect.push(byCurrency);\n        if (searchQuery) toIntersect.push(byQuery);\n\n        let result = _.intersection(...toIntersect);\n\n        return result;\n    };\n\n    const Countries = () =>\n        filteredCountries.map((country: country, index: number) => {\n            return (\n                <Link\n                    to={`/country/${country.alpha2Code.toLocaleLowerCase()}`}\n                    key={index}\n                    onClick={() => setSelectedCountry(country)}\n                >\n                    <span>{country.name}</span>\n                </Link>\n            );\n        });\n\n    return <>{Countries()}</>;\n}\n\nexport default ListCountries;\n\n","/Users/marcegi/Desktop/crehana/discover-world/src/components/Filter.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/HomePage.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/GeneralStyled.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/Country.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/Filter.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/Footer.tsx",[],["78","79"],"/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/Header.tsx",[],"/Users/marcegi/Desktop/crehana/discover-world/src/assets/styles/SearchBar.tsx",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":68,"column":8,"nodeType":"86","endLine":68,"endColumn":10,"suggestions":"87"},{"ruleId":"84","severity":1,"message":"88","line":60,"column":8,"nodeType":"86","endLine":60,"endColumn":41,"suggestions":"89"},{"ruleId":"80","replacedBy":"90"},{"ruleId":"82","replacedBy":"91"},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getCountries' and 'props.selectedCountry.name'. Either include them or remove the dependency array.","ArrayExpression",["94"],"React Hook useEffect has a missing dependency: 'filterCountries'. Either include it or remove the dependency array.",["95"],["92"],["93"],"no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},"Update the dependencies array to be: [getCountries, props.selectedCountry.name]",{"range":"100","text":"101"},"Update the dependencies array to be: [filters, countries, searchQuery, filterCountries]",{"range":"102","text":"103"},[1609,1611],"[getCountries, props.selectedCountry.name]",[1601,1634],"[filters, countries, searchQuery, filterCountries]"]